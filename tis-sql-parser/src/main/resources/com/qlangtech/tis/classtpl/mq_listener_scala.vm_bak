package com.qlangtech.tis.realtime.transfer.${config.collection}

import com.qlangtech.tis.realtime.transfer.ruledriven.AllThreadLocal.addThreadLocalVal

import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.caseIfFunc
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.collect_list
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.collect_set
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.concat_ws
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.count
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.defaultDoubleVal
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.defaultVal
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.getArrayIndexProp
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.get_json_object
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.min
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.op_and
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.round
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.split
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.sum
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.typeCast
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.regexp

import com.qlangtech.tis.realtime.transfer.ruledriven.MediaResultKey.putMediaResult

import com.taobao.terminator.wangjubao.jingwei.Alias.Builder.alias
import com.taobao.terminator.wangjubao.jingwei.Alias.Builder.$
import com.taobao.terminator.wangjubao.jingwei.Alias.Builder

#foreach($i in $config.entitiesList  )
import com.qlangtech.tis.realtime.${i.javaPropDbName}.pojo.${i.javaPropTableName}Criteria
import com.qlangtech.tis.realtime.${i.javaPropDbName}.pojo.${i.javaPropTableName}
#end
#foreach($i in $config.dumpTables  )
import com.qlangtech.tis.realtime.${i.javaPropDbName}.pojo.${i.javaPropTableName}ColEnum
#end 

import java.util.Collections

import java.util.List

import scala.collection.mutable.Map

import java.util.Set

import java.util.concurrent.Callable

import java.util.concurrent.TimeUnit

import org.slf4j.Logger

import org.slf4j.LoggerFactory

import org.springframework.beans.factory.annotation.Autowired

import com.qlangtech.tis.ibatis.RowMap

import com.qlangtech.tis.realtime.order.dao.IOrder2DAOFacade

import com.qlangtech.tis.realtime.shop.dao.IMallShopDAO

import com.qlangtech.tis.realtime.transfer.BasicPojoConsumer

import com.qlangtech.tis.realtime.transfer.IPk

import com.qlangtech.tis.realtime.transfer.IRowValueGetter

import com.qlangtech.tis.realtime.transfer.ITable

import com.qlangtech.tis.realtime.transfer.impl.DefaultPojo

import com.qlangtech.tis.realtime.transfer.ruledriven.BasicRuleDrivenListener

import com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.Case

import com.qlangtech.tis.realtime.transfer.ruledriven.GroupKey

import com.qlangtech.tis.realtime.transfer.ruledriven.GroupValues

import com.google.common.cache.Cache

import com.google.common.cache.CacheBuilder

//import com.google.common.collect.Maps

import com.google.common.util.concurrent.RateLimiter

import com.taobao.terminator.pubhook.common.Nullable

import com.taobao.terminator.wangjubao.jingwei.Alias.ILazyTransfer

import com.taobao.terminator.wangjubao.jingwei.AliasList

import com.taobao.terminator.wangjubao.jingwei.AliasList.BuilderList

import com.twodfire.async.message.client.sender.SendManager

import S4totalpayListener._

//remove if not needed

import scala.collection.JavaConverters._
import scala.util.control.Breaks._

object ${config.javaName}Listener {

  private val log: Logger =
    LoggerFactory.getLogger(classOf[S4totalpayListener])

  val PK_TOTALPAY_ID: String = "totalpay_id"


  private class NullCompositePK
    extends WithMallPk("null", "null", ShoppingMallId.NULL)
    with Nullable

  private val NULL_PK: NullCompositePK = new NullCompositePK()

  private val payinfosThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] =
    addThreadLocalVal()

  private val instancedetailsThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] = addThreadLocalVal()

  private val specialfeesThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] =
    addThreadLocalVal()

  private val NUM_CONSUME_NUM_5: Int = 5

  private val ENTITY_ID: String = "entity_id"

}

class ${config.javaName}Listener extends BasicRuleDrivenListener {

  private var topicSender: SendManager = _
  // add baisui 20190413
  private var mallShopDAO: IMallShopDAO = _
  
  override def createProcessRate(): RateLimiter = RateLimiter.create(600)

  protected override def processColsMeta(builder: BuilderList): Unit = {
    ${config.colsMetaBuilderList}  
  }

 #foreach($i in $config.mapDataMethodCreatorList  ) 
   $i.generateMapDataMethodBody
 #end  

  override def createRowsWrapper(): DefaultPojo = new TotalpayWrapper(this)

  override def getConsumeNum(): Int = NUM_CONSUME_NUM_5

  protected override def createPojoConsumer(): BasicPojoConsumer = {
   val consumer = new BasicRuleDrivenPojoConsumer(this,this.tabColumnMetaMap.asScala){}
   consumer
  }

  private var orderDaoFacade: IOrder2DAOFacade = _

  private var cardcenterDaoFacade: com.qlangtech.tis.realtime.cardcenter.dao.ICardcenter0DAOFacade =
    _

  private var memberDaoFacade: com.qlangtech.tis.realtime.member.dao.IMember1DAOFacade =
    _

  private var shopDaoFacade: com.qlangtech.tis.realtime.shop.dao.IShopDAOFacade = _

  protected override def pushPojo2Queue(pk: IPk, table: ITable): Unit = {
    super.pushPojo2Queue(pk, table)
  }

  def setTopicSender(topicSender: SendManager): Unit = {
    this.topicSender = topicSender
  }

  @Autowired
  def setMallShopDAO(mallShopDAO: IMallShopDAO): Unit = {
    this.mallShopDAO = mallShopDAO
  }

}
