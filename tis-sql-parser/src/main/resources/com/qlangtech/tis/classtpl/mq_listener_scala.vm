package com.qlangtech.tis.realtime.transfer.${config.collection}

import com.qlangtech.tis.realtime.transfer.ruledriven.AllThreadLocal.addThreadLocalVal
import com.qlangtech.tis.realtime.transfer.impl.DefaultPk
import com.qlangtech.tis.sql.parser.tuple.creator.EntityName
import com.google.common.collect.Lists

import com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils._
#*
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.caseIfFunc
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.collect_list
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.collect_set
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.concat_ws
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.count
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.defaultDoubleVal
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.defaultVal
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.getArrayIndexProp
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.get_json_object
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.min
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.op_and
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.round
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.split
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.sum
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.typeCast
import  com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.regexp
*#
import com.qlangtech.tis.realtime.transfer.ruledriven.MediaResultKey.putMediaResult
import com.qlangtech.tis.realtime.transfer.ruledriven.MediaResultKey.getMediaResult

import com.qlangtech.tis.wangjubao.jingwei.Alias.Builder.alias
import com.qlangtech.tis.wangjubao.jingwei.Alias.Builder.$
import com.qlangtech.tis.wangjubao.jingwei.Alias.Builder
import com.qlangtech.tis.realtime.transfer.ruledriven.BasicRuleDrivenPojoConsumer
import com.qlangtech.tis.realtime.transfer.ruledriven.BasicRuleDrivenWrapper
#*
// import Criteria and POJO
#foreach($i in $config.entitiesList  )
import com.qlangtech.tis.realtime.${i.javaPropDbName}.pojo.${i.javaPropTableName}Criteria
import com.qlangtech.tis.realtime.${i.javaPropDbName}.pojo.${i.javaPropTableName}
#end
// END import Criteria and POJO
*#
#foreach($i in $config.dumpTables  )
import com.qlangtech.tis.realtime.${i.javaPropDbName()}.pojo.${i.javaPropTableName()}ColEnum
import com.qlangtech.tis.realtime.${i.javaPropDbName()}.pojo.${i.javaPropTableName()}Criteria
import com.qlangtech.tis.realtime.${i.javaPropDbName()}.pojo.${i.javaPropTableName()}
#end

#foreach($d in $config.facadeContextList )
import ${d.fullFacadeClassName}
#end
import java.util.Collections
import java.util.List
import scala.collection.mutable.Map
import java.util.Set
import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import com.qlangtech.tis.ibatis.RowMap
import com.qlangtech.tis.realtime.transfer.DTO

import com.qlangtech.tis.realtime.transfer.BasicPojoConsumer
import com.qlangtech.tis.realtime.transfer.IPk
import com.qlangtech.tis.realtime.transfer.IRowValueGetter
import com.qlangtech.tis.realtime.transfer.ITable
import com.qlangtech.tis.realtime.transfer.impl.DefaultPojo
import com.qlangtech.tis.realtime.transfer.ruledriven.BasicRuleDrivenListener
import com.qlangtech.tis.realtime.transfer.ruledriven.FunctionUtils.Case
import com.qlangtech.tis.realtime.transfer.ruledriven.GroupKey
import com.qlangtech.tis.realtime.transfer.ruledriven.GroupValues

import com.google.common.cache.Cache
import com.google.common.cache.CacheBuilder
import com.google.common.util.concurrent.RateLimiter
import com.qlangtech.tis.pubhook.common.Nullable
import com.qlangtech.tis.wangjubao.jingwei.Alias.ILazyTransfer

import com.qlangtech.tis.wangjubao.jingwei.AliasList
import com.qlangtech.tis.wangjubao.jingwei.AliasList.BuilderList
#*
import com.twodfire.async.message.client.sender.SendManager
 *#
import com.qlangtech.tis.realtime.transfer.impl.DefaultTable
import com.qlangtech.tis.realtime.transfer.impl.CompositePK
import ${config.javaName}Listener._

import com.qlangtech.tis.extension.TISExtension;

import scala.collection.JavaConverters._
import scala.util.control.Breaks._

object ${config.javaName}Listener {

private val log: Logger = LoggerFactory.getLogger(classOf[${config.javaName}Listener])
#*
private val payinfosThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] = addThreadLocalVal()
private val instancedetailsThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] = addThreadLocalVal()
private val specialfeesThreadLocal: ThreadLocal[Map[GroupKey, GroupValues]] = addThreadLocalVal()
private val ENTITY_ID: String = "entity_id"
*#
private val NUM_CONSUME_NUM_5: Int = 5



}

@TISExtension(name = "default", ordinal = 0)
class ${config.javaName}Listener extends BasicRuleDrivenListener {

private var _tabsFocuse : java.util.Set[String] = _

override def createProcessRate(): RateLimiter = RateLimiter.create(600)

override def getShardIdName( tabName : String ) : String = {
val shardIdVal = tabName match {
#foreach($i in $config.dumpTables  )
    #if(!$config.isTriggerIgnore($i))
    case "${i.tabName}" => "${config.getSharedId($i)}"
    #end
#end
case _=> throw new IllegalArgumentException("table name:"+ tabName +" is illegal");
}
shardIdVal
}


protected override def processColsMeta(builder: BuilderList): Unit = {
  ${config.colsMetaBuilderList}
}



#foreach($i in $config.mapDataMethodCreatorList  )
  $i.generateMapDataMethodBody
#end

override def createRowsWrapper(): DefaultPojo = new BasicRuleDrivenWrapper(this)

override def getConsumeNum(): Int = NUM_CONSUME_NUM_5

protected override def createPojoConsumer(): BasicPojoConsumer = {
val consumer = new BasicRuleDrivenPojoConsumer(this,this.tabColumnMetaMap.asScala){}
consumer
}

protected override def pushPojo2Queue(pk: IPk, table: ITable): Unit = {
super.pushPojo2Queue(pk, table)
}

#foreach($d in $config.facadeContextList  )
private var ${d.facadeInstanceName} : ${d.facadeInterfaceName} = _

@Autowired
def ${d.facadeInstanceSetterName}(${d.facadeInstanceName}: ${d.facadeInterfaceName}): Unit = {
this.${d.facadeInstanceName} = ${d.facadeInstanceName}
}
#end

#***********************************************************
 * 生成getPK部分
 ************************************************************#
/**
 * 取得索引宽表主键
 * @return
 */
override def getPk( row : ITable) : DefaultPk = {

  if (row.getEventType() == DTO.EventType.DELETE) {
     return null;
  }

  val resultPK = row.getTableName() match {
#foreach($i in $config.dumpTables  )
    #if(!$config.isTriggerIgnore($i))
    case "${i.tabName}" => get${i.javaPropTableName()}PK(row)
    #end
#end
    case _=> throw new IllegalArgumentException("table name:"+ row.getTableName()+" is illegal");
  }
resultPK
}

protected override def getTableFocuse() : java.util.Set[String] = {
  if(_tabsFocuse == null){
     _tabsFocuse = com.google.common.collect.Sets.newHashSet( $config.tableFocuseJoinerLiteria);
  }
  _tabsFocuse
}

#foreach($i in $config.dumpTables  )
    #if(!$config.isTriggerIgnore($i))
private def get${i.javaPropTableName()}PK(row : ITable) : DefaultPk = {

  val columnMeta : AliasList = tabColumnMetaMap.get("${i.tabName}");
  if (columnMeta == null) {
     throw new IllegalStateException("tableName: ${i.tabName} is not exist in tabColumnMetaMap");
  }
    #if($config.isPrimaryTable($i.tabName))
  return new CompositePK(row.getColumn("$config.getPTableDBPKName($i.tabName)")  $config.getPTableRouterKeysName($i.tabName));
    #else
        #* Optional<TableRelation>*#
        #set($parentTabRef=$config.getFirstParent($i.tabName))
        #set($tabName=$i.tabName)
        #* List<TableRelation> *#
        #set($childTabRef=$config.getChildTabReference($i.tabName))
        #parse("/com/qlangtech/tis/classtpl/parsePKGetter.vm")
    #end
} // END get${i.javaPropTableName()}PK
    #end
#end
// globalScripts
#foreach($g in $config.globalScripts)
$g
#end
#*
         // 判断是否是主表
         if (this.primaryTables.get(row.getTableName()) != null) {
             return new CompositePK(row, columnMeta.getPk(), sharedId);
         }

         Map.Entry<Alias /** 子表关联主表的列 */, AliasList> parentTabRef = columnMeta.getFirstParentTab();
         Map<Alias /** 子表的FK列 */, AliasList> childTabRef = columnMeta.getChildTabReference();

         if (parentTabRef != null) {
             if (this.primaryTables.get(parentTabRef.getValue().getTableName()) != null) {
                 // 取当前表的主表，且主表就是索引宽表的 主维度表,则直接用字表的fk的值就能作为主表PK值
                 return new CompositePK(row, parentTabRef.getKey() /**子表列*/, entityId);
             } else {
                 AliasList parentTab = parentTabRef.getValue();
                 // TODO 这里估计需要用迭代来实现了

             }
         }
         AliasList childTab = null;
         for (Map.Entry<Alias /** 子表的FK列 */, AliasList> e : childTabRef.entrySet()) {

             childTab = e.getValue();

             if (this.primaryTables.get(childTab.getTableName()) == null) {
                 continue;
             }

             List<RowMap> childRows = getChildRowsByParentPK(childTab.getTableName(), entityId, e.getKey().getName(), columnMeta.getPk().getRawVal(row));

             boolean isMulti = false;
             boolean hasChildRow = false;
             for (RowMap childRow : childRows) {
                 hasChildRow = true;
                 if (isMulti) {
                     this.pushPojo2Queue(new CompositePK(childRow, e.getKey() /**子表列*/, entityId), row);
                 } else {
                     // 子表和主表是一对一的关系
                     return new CompositePK(childRow, e.getKey() /**子表列*/, entityId);
                 }
             }
             if (hasChildRow) {
                 return null;
             }
         }
         return null;
     }
*#

}
